# Generated by Django 5.2.1 on 2025-06-03 07:21

import django.core.validators
import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('orders', '0001_initial'),
        ('products', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ReviewAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('approved_reviews', models.PositiveIntegerField(default=0)),
                ('rejected_reviews', models.PositiveIntegerField(default=0)),
                ('pending_reviews', models.PositiveIntegerField(default=0)),
                ('five_star_reviews', models.PositiveIntegerField(default=0)),
                ('four_star_reviews', models.PositiveIntegerField(default=0)),
                ('three_star_reviews', models.PositiveIntegerField(default=0)),
                ('two_star_reviews', models.PositiveIntegerField(default=0)),
                ('one_star_reviews', models.PositiveIntegerField(default=0)),
                ('total_votes', models.PositiveIntegerField(default=0)),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('questions_asked', models.PositiveIntegerField(default=0)),
                ('questions_answered', models.PositiveIntegerField(default=0)),
                ('reports_received', models.PositiveIntegerField(default=0)),
                ('reports_resolved', models.PositiveIntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='ReviewTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('template_type', models.CharField(choices=[('approval', 'Approval Message'), ('rejection', 'Rejection Message'), ('warning', 'Warning Message'), ('request_modification', 'Request Modification')], max_length=20)),
                ('subject', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['template_type', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('review_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('overall_rating', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('quality_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('freshness_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('packaging_rating', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('comment', models.TextField()),
                ('verified_purchase', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending Moderation'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('flagged', 'Flagged')], default='pending', max_length=20)),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('total_votes', models.PositiveIntegerField(default=0)),
                ('images', models.JSONField(blank=True, default=list)),
                ('moderated_at', models.DateTimeField(blank=True, null=True)),
                ('moderation_notes', models.TextField(blank=True)),
                ('seller_response', models.TextField(blank=True)),
                ('seller_response_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('moderated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='moderated_reviews', to=settings.AUTH_USER_MODEL)),
                ('order', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='orders.order')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='customer_reviews', to='products.product')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='product_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewIncentive',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('incentive_type', models.CharField(choices=[('discount', 'Discount Coupon'), ('points', 'Loyalty Points'), ('free_shipping', 'Free Shipping'), ('cashback', 'Cashback')], max_length=20)),
                ('minimum_rating', models.PositiveIntegerField(default=1, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('minimum_comment_length', models.PositiveIntegerField(default=50)),
                ('requires_image', models.BooleanField(default=False)),
                ('requires_verified_purchase', models.BooleanField(default=True)),
                ('reward_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('max_rewards_per_user', models.PositiveIntegerField(default=1)),
                ('total_rewards_available', models.PositiveIntegerField(blank=True, null=True)),
                ('rewards_claimed', models.PositiveIntegerField(default=0)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('status', models.CharField(choices=[('active', 'Active'), ('paused', 'Paused'), ('expired', 'Expired')], default='active', max_length=20)),
                ('target_user_segments', models.JSONField(blank=True, default=list)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('target_categories', models.ManyToManyField(blank=True, to='products.category')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('question', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('answered', 'Answered'), ('closed', 'Closed')], default='pending', max_length=20)),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('asker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='asked_questions', to=settings.AUTH_USER_MODEL)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='questions', to='products.product')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('answer', models.TextField()),
                ('is_seller_answer', models.BooleanField(default=False)),
                ('verified_purchase', models.BooleanField(default=False)),
                ('helpful_votes', models.PositiveIntegerField(default=0)),
                ('total_votes', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('answerer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provided_answers', to=settings.AUTH_USER_MODEL)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='reviews.reviewquestion')),
            ],
            options={
                'ordering': ['-helpful_votes', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('report_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('reason', models.CharField(choices=[('spam', 'Spam'), ('inappropriate', 'Inappropriate Content'), ('fake', 'Fake Review'), ('offensive', 'Offensive Language'), ('irrelevant', 'Irrelevant'), ('personal_info', 'Contains Personal Information'), ('other', 'Other')], max_length=20)),
                ('description', models.TextField()),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('investigating', 'Under Investigation'), ('resolved', 'Resolved'), ('dismissed', 'Dismissed')], default='pending', max_length=20)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('resolution_notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_reports', to=settings.AUTH_USER_MODEL)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='reviews.review')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_reports', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewReward',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reward_id', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('reward_value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('redeemed', 'Redeemed'), ('expired', 'Expired'), ('cancelled', 'Cancelled')], default='pending', max_length=20)),
                ('coupon_code', models.CharField(blank=True, max_length=50)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('redeemed_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('incentive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rewards', to='reviews.reviewincentive')),
                ('review', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='reward', to='reviews.review')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_rewards', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReviewVote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vote_type', models.CharField(choices=[('helpful', 'Helpful'), ('unhelpful', 'Unhelpful')], max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='reviews.review')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='review_votes', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['product', 'status'], name='reviews_rev_product_0aaa55_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['reviewer', 'created_at'], name='reviews_rev_reviewe_06e3c4_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['overall_rating', 'status'], name='reviews_rev_overall_615e89_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('product', 'reviewer')},
        ),
        migrations.AddIndex(
            model_name='reviewquestion',
            index=models.Index(fields=['product', 'status'], name='reviews_rev_product_e0824e_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewquestion',
            index=models.Index(fields=['asker', 'created_at'], name='reviews_rev_asker_i_199332_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewanswer',
            index=models.Index(fields=['question', 'is_seller_answer'], name='reviews_rev_questio_2d568b_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewanswer',
            index=models.Index(fields=['answerer', 'created_at'], name='reviews_rev_answere_f18001_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreport',
            index=models.Index(fields=['status', 'created_at'], name='reviews_rev_status_a3683e_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreport',
            index=models.Index(fields=['review', 'status'], name='reviews_rev_review__d11166_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreward',
            index=models.Index(fields=['user', 'status'], name='reviews_rev_user_id_adbe0c_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewreward',
            index=models.Index(fields=['incentive', 'status'], name='reviews_rev_incenti_e64fb2_idx'),
        ),
        migrations.AddIndex(
            model_name='reviewvote',
            index=models.Index(fields=['review', 'vote_type'], name='reviews_rev_review__fbe00e_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reviewvote',
            unique_together={('review', 'voter')},
        ),
    ]
